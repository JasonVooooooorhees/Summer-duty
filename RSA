import typing as tp
import random

def is_prime(n: int) -> bool:
    """
    >>> is_prime(2)
    True
    >>> is_prime(11)
    True
    >>> is_prime(8)
    False
    """
    if n >= 10:
        for i in range(2, 10):
            if n % i == 0:
                return False
        return True
    else:
        for i in range(2, n):
            if n % i == 0:
                return False
        return True

def generate_keypair(p: int, q: int) -> tp.Tuple[tp.Tuple[int, int], tp.Tuple[int, int]]:
    if not (is_prime(p) and is_prime(q)):
        raise ValueError('Both numbers must be prime.')
    elif p == q:
        raise ValueError('p and q cannot be equal')

    n = p * q

    phi = (p-1) * (q-1)

    # Choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi)

    # Use Euclid's Algorithm to verify that e and phi(n) are comprime
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    # Use Extended Euclid's Algorithm to generate the private key
    d = multiplicative_inverse(e, phi)
    # Return public and private keypair
    # Public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))

def gcd(a: int, b: int) -> int:
    """
    >>> gcd(12, 15)
    3
    >>> gcd(3, 7)
    1
    """
    a_divisors = {1}
    b_divisors = {1}
    for i in range(1, a + 1):
        if a % i == 0:
            a_divisors.add(i)
    for i in range(1, b + 1):
        if b % i == 0:
            b_divisors.add(i)
    common_divisers = a_divisors & b_divisors
    result = 1
    for d in common_divisers:
        result *= d
    return result

def multiplicative_inverse(e: int, phi: int) -> int:
    """
    >>> multiplicative_inverse(7, 40)
    23
    """
    res = []
    x = [0, 1]
    y = [1]
    while phi % e != 0:
        res.append(phi // e)
        e, phi = phi % e, e
    for i in range(1, len(res) + 1):
        y.append(x[i-1] - y[i-1] * res[-i])
        x.append(y[-1])
    return y[-1]
